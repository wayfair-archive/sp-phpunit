#!/bin/bash
# This script allows you to run phpunit in parallel
# For more information see README.md
set -o errexit
set -o nounset
PATH=/bin:/usr/bin

#The full path to your php auto_prepend file
export AUTO_PREPEND=
#This is the suite that you want your xml file generated from
export GENERATE_XML_FROM_SUITE=
#This is the full path to where you want your generated xml file to be put
export GENERATED_XML_PATH="/tmp/generated.xml"
# How many concurrent running phpunit processes we want
export PARALLEL_RUNS=$(($(nproc)*3))
#This is the path to your phpunit xml file
export PHPUNIT_XML_PATH
#This is the suffix you want the find command to use when determining which files are test files
export TEST_FILE_SUFFIX="Test.php"
#We'll need this in a few places
export RANDOM_STRING=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w8 | head -n1)
#We'll use this in case we are calling pmp-phpunit in another script and don't want that script failing on a non-0 exit code
export CUSTOM_EXIT_CODE=

function pmp_phpunit_help {
  echo '
    Synopsis:
        '"${0}"'
        --auto_prepend="</path/to/auto_prepend/>"
        --generate-from-xml="<test_suite>"
        --phpunit-xml-path="</path/to/phpunit/xmlfile>"
        [<options>]
    Sample usage:
        '"${0}"' --generate-from-xml="parallel_suite" --phpunit-xml-path="/usr/local/www/data/tests/conf/phpunit.xml" --test-file-suffix="_test.php" --auto-prepend="/usr/local/www/data/includes/auto_prepend.php"

    The following options are valid & required:

    --generate-from-xml         This is the test suite that you would like your xml file generated from
    --phpunit-xml-path          This is the path to your phpunit xml file

    The following options are optional

    --auto-prepend              Full path to your autoprepend file for php
    --dry-run                   This passes in the --dry-run option to parallel so that it returns the commands it would run
    --generated-xml-path        This is the path where you would like the generated xml file to be stored. Default /tmp/generated.xml
    --parallel-runs             How many different parallel jobs you want to run. Default: 3, best appears to be cores*3
    --test-file-suffix          This is the suffix that you use for your phpunit tests eg.Test.php
    --custom-exit-code          This is the exit code you would like returned if pmp-phpunit would normally exit with a non-0 code'
    exit 0
}

# This function takes a phpunit formatted xml file and parses it for all directories that should be run for a given suite
# TODO this won't handle if there are jobs commented out, it will still accept them.
# So your xml file should only contain actual directories that have "production ready" tests
function parse_xml_generate_xml_file_list {
  local directories
  local files=""
  # the awk sets the field separator to be either < or > so that we can grab just the paths, it then searches for the suite name and prints all directories
  directories=( $(awk 'BEGIN { FS = "([><])" }
        match($2,"'"${1}"'"){
          while (!match($2,"/testsuite")) {
            if(length($3) > 0) print $3; getline
          }
        }' "${PHPUNIT_XML_PATH}") )
  if [[ "${#directories[@]}" -lt 1 ]]; then
    echo "1"
    return
  fi
  for directory in "${directories[@]}"; do
    # This finds all test files in a given directory and formats them to the phpunit xml standard so that they can be combined into testsuites later on
    files=${files}" "$(find "${directory}" -type f -name "*${TEST_FILE_SUFFIX}" -print \
                        | tr " " "\n"                                                  \
                        | xargs -I{} echo "<file suffix=\"${TEST_FILE_SUFFIX}\">"{}'</file>')
  done
  echo "${files}"
}

# This creates a valid phpunit xml file to be read by our parallel job
function create_testsuites {
  local counter=0
  local start_index=0
  local array_of_files
  local xml_file_list=$1
  local files_per_testsuite=$2
  local oIFS
  local full_xml_file='<?xml version="1.0" encoding="UTF-8"?>
                      <phpunit
                        backupGlobals="true"
                        backupStaticAttributes="false"
                        strict="true"
                        verbose="true"
                        convertErrorsToExceptions="true"
                        processIsolation="false"
                        debug="true">
                      <testsuites>'
  # set the old field separator so that we don't muck anything up
  oIFS="$IFS"
  # change IFS to generate array correctly
  IFS=$'\n'
   # using build in bash variable find/replace was much less performant, added ~10 seconds
   array_of_files=( $( echo "${xml_file_list}" | sed 's|</file> <file|</file>\n<file|g') )
  IFS=$oIFS
  # we'll be creating as many testsuites as we are allowing parallel jobs to be run to maximize usage
  while [[ $counter -lt $PARALLEL_RUNS ]]; do
    start_index=$(( counter * files_per_testsuite ))
    file_list=${array_of_files[*]:$start_index:$files_per_testsuite}
     if [[ -n "$file_list" ]]; then
       full_xml_file=$full_xml_file$(echo -e "<testsuite name=\"test${counter}\">${file_list}</testsuite>")
     fi
    let counter=counter+1
  done
  full_xml_file="${full_xml_file}</testsuites></phpunit>"
  echo "$full_xml_file"
}

function clean_up {
  local main_exit_code=$1
  if [[ -n "${GENERATE_XML_FROM_SUITE}" ]]; then
    for ((i=0;i<PARALLEL_RUNS;i++)); do
      rm -f "/tmp/${GENERATE_XML_FROM_SUITE}${RANDOM_STRING}${i}"
    done
  fi
  rm -f "${GENERATED_XML_PATH}"
  if [[ ${main_exit_code} == "0" ]]; then
    rm -f "/tmp/exit_code_${RANDOM_STRING}"
  fi
}
function main {
  local parallel_phpunit_command=""
  local dry_run=""
  local auto_prepend_file
  local full_file_listing=""
  local full_file_list_array=()
  local args="${@}"
  for param in $args; do
      if [[ "${param:0:20}" == '--generate-from-xml=' ]]; then
        GENERATE_XML_FROM_SUITE="${param:20}"
      elif [[ "${param:0:19}" == '--phpunit-xml-path=' ]]; then
        PHPUNIT_XML_PATH="${param:19}"
      elif [[ "${param:0:19}" == '--test-file-suffix=' ]]; then
        TEST_FILE_SUFFIX="${param:19}"
      elif [[ "${param:0:21}" == '--generated-xml-path=' ]]; then
        if [[ "${param:(-4)}" != '.xml' ]]; then
          echo "Your path for where to generate your temporary xml file must end with \".xml\""
          exit 2
        fi
        GENERATED_XML_PATH="${param:21}"
      elif [[ "${param:0:16}" == '--parallel-runs=' ]]; then
        PARALLEL_RUNS="${param:16}"
      elif [[ "${param:0:15}" == '--auto-prepend=' ]]; then
        AUTO_PREPEND="-d auto_prepend_file='${param:15}'"
      elif [[ "${param}" == "-h" || "${param}" == "--help" ]]; then
        pmp_phpunit_help
      elif [[ "${param}" == "--dry-run" ]]; then
        dry_run="--dry-run"
      elif [[ "${param:0:19}" == "--custom-exit-code=" ]]; then
        CUSTOM_EXIT_CODE="${param:19}"
      fi
  done

  if [[ -z $GENERATE_XML_FROM_SUITE || -z $PHPUNIT_XML_PATH ]]; then
    echo -e "\nPlease see the help for how to properly call pmp-phpunit\n
pmp-phpunit --generate-from-xml=\"<test_suite>\" --phpunit-xml-path=\"</path/to/phpunit/xmlfile>\" [<options>]"
  fi
  # let's get all of the directories that our testsuite would run, and use them to generate an xml ready file list
  full_file_listing=$(parse_xml_generate_xml_file_list "${GENERATE_XML_FROM_SUITE}")
  if [[ "${full_file_listing}" == "1" ]]; then
    echo "No results found for test suite ${GENERATE_XML_FROM_SUITE}, please check your spelling and try again"
    exit 1
  fi
  # set the old field separator so that we don't muck anything up
  oIFS="$IFS"
  # change IFS to generate array correctly
  IFS=$'\n'
  full_file_list_array=( $( echo "${full_file_listing}" | sed 's|</file> <file|</file>\n<file|g') )
  IFS=$oIFS
  let results_per_suite="((${#full_file_list_array[*]}/${PARALLEL_RUNS} + 1))"
  # If we have fewer files to test than parallel runs, we should set the results to 1 so that we actually run something
  test "$results_per_suite" -eq 0 && results_per_suite=1
  echo -e "$(create_testsuites "${full_file_listing}" "${results_per_suite}")" > "${GENERATED_XML_PATH}"
  testsuite_names=""
  # Just a bit of randomness to make sure we don't get collisions
  local exit_code=0
  for ((i=0;i<PARALLEL_RUNS;i++)); do
    # Redirecting to a tmp file so that the output is clean and readable/parseable still
    # using a tmp file as using a variable decreased performance considerably
    # PIPESTATUS allows us to grab the exit code of each of these phpunit runs so we can exit with accurate statuses
    php \
     ${AUTO_PREPEND}\
     /usr/bin/phpunit --configuration\
     ${GENERATED_XML_PATH} --testsuite "test${i}"\
       --strict | cat > "/tmp/${GENERATE_XML_FROM_SUITE}${RANDOM_STRING}${i}" && echo "${PIPESTATUS[0]}" >> "/tmp/exit_code_${RANDOM_STRING}"&
  done
  wait
  for ((i=0;i<PARALLEL_RUNS;i++)); do
    cat "/tmp/${GENERATE_XML_FROM_SUITE}${RANDOM_STRING}${i}"
  done
  exit_code=$(cat "/tmp/exit_code_${RANDOM_STRING}" | awk '/[^0]/{print $0}')
  if [[ ${#exit_code} -lt 1 ]]; then
    exit_code=0
  else
    echo -e "\nNon-zero exit code, you can view the exit codes of all of the phpunit runs at /tmp/exit_code${RANDOM_STRING}"
    if [[ -n ${CUSTOM_EXIT_CODE} ]]; then
      exit_code="${CUSTOM_EXIT_CODE}"
    else
      exit_code=1
    fi
  fi
  exit ${exit_code}
}

trap 'clean_up $?' EXIT
main "${@}"
